import stringutils;
import pssupport;

modeltype UML "strict" uses uml('http://www.eclipse.org/uml2/5.0.0/UML');
modeltype PS "strict" uses ps('http://io.github.abelgomez/ps/1.0');

library umlsupport;



helper OrderedSet (UML::InteractionFragment)::filterInterestingEvents() : OrderedSet (UML::InteractionFragment) {
	return self
		-- They correspond to interesting events: 
		->select(e |
			-- Is an 'alt' CombinedFragment
			if e.oclIsKindOf(UML::CombinedFragment)
				then e.oclAsType(UML::CombinedFragment).interactionOperator = UML::InteractionOperatorKind::alt and
				 		e.oclAsType(UML::CombinedFragment).operand.fragment->flatten()->asOrderedSet()->filterInterestingEvents()->notEmpty()
				else false endif
			or
			-- Is a 'par' CombinedFragment
			if e.oclIsKindOf(UML::CombinedFragment)
				then e.oclAsType(UML::CombinedFragment).interactionOperator = UML::InteractionOperatorKind::par and
				 		e.oclAsType(UML::CombinedFragment).operand.fragment->flatten()->asOrderedSet()->filterInterestingEvents()->notEmpty()
				else false endif
			or
			-- Is a ExecutionSpecification stereotyped as AssignmentExecution or
			if e.oclIsKindOf(UML::ExecutionSpecification)
				then e.oclAsType(UML::ExecutionSpecification).isAssignmentExecution() 
				else false endif
			or
			-- Is a MessageOccurrenceSpecification whose Message is stereotyped as a AbstractSetter
			if e.oclIsKindOf(UML::MessageOccurrenceSpecification)
				then let mos : UML::MessageOccurrenceSpecification = e.oclAsType(UML::MessageOccurrenceSpecification) in 
					mos.message.isAbstractSetter() and mos.message.sendEvent = mos  
				else false endif);
}

helper UML::InteractionFragment::coveredInteraction() : UML::Interaction {
	assert fatal (self.covered.interaction->asOrderedSet()->size() = 1) with log ('Unexpected number of covered Interactions: Expected exactly "1" but bound "{1}"'._format(self.covered.interaction->asOrderedSet()->size()));
	return self.covered.interaction->asOrderedSet()->first();
}

helper UML::MessageOccurrenceSpecification::findPreviousGetters() : OrderedSet (PS::Getter) {
	var thisLifeline : UML::Lifeline := self.lifeline();
	var elt : UML::Element := self;
	var fragments : List (UML::InteractionFragment);
	while (elt.owner <> null) {
		if (elt.owner.hasFragments()) {
			var i : Integer := elt.owner.fragments()->indexOf(elt); 
			while (i >= 1) {
				fragments->add(elt.owner.fragments()->at(i));
				i := i-1;
			};
		};
		if (elt.owner = self.coveredInteraction()) {
			break;
		} else {
			elt := elt.owner;
		}
	};
	return fragments->reverse()[UML::MessageOccurrenceSpecification][lifeline() = thisLifeline].message[isGetter()].getter()->asOrderedSet();
}

helper UML::InteractionFragment::findPreviousGetters() : OrderedSet (PS::Getter) {
	var elt : UML::Element := self;
	var fragments : List (UML::InteractionFragment);
	while (elt.owner <> null) {
		if (elt.owner.hasFragments()) {
			var i : Integer := elt.owner.fragments()->indexOf(elt); 
			while (i >= 1) {
				fragments->add(elt.owner.fragments()->at(i));
				i := i-1;
			};
		};
		if (elt.owner = self.coveredInteraction()) {
			break;
		} else {
			elt := elt.owner;
		}
	};
	return fragments->reverse()[UML::MessageOccurrenceSpecification][self.covered->includes(lifeline())].message[isGetter()].getter()->asOrderedSet();
}

helper UML::Element::hasFragments() : Boolean {
	return self.oclIsKindOf(UML::Interaction) or self.oclIsKindOf(InteractionOperand);
}

helper UML::Element::fragments() : OrderedSet (UML::InteractionFragment) {
	if (self.oclIsKindOf(UML::Interaction)) {
		return self.oclAsType(UML::Interaction).fragment;
	} else if (self.oclIsKindOf(InteractionOperand)) {
		return self.oclAsType(UML::InteractionOperand).fragment;
	} else {
		return null;
	}
}

helper UML::Interaction::clientLifelines() : Set (UML::Lifeline) {
	return self.lifeline->select(isClient());
}

helper UML::Interaction::serviceLifelines() : Set (UML::Lifeline) {
	return self.lifeline->select(isService());
}

helper UML::Interaction::resourcesLifelines() : Set (UML::Lifeline) {
	return self.lifeline->select(isResource());
}

helper UML::Interaction::clientClassifiers() : Bag (UML::Classifier) {
	return self.clientLifelines().represents.type->selectByKind(UML::Classifier);
}

helper UML::Lifeline::events() : OrderedSet(UML::InteractionFragment) {
	return self.interaction.fragment->select(covered->includes(self)) 
}

helper UML::ExecutionSpecification::lifeline() : UML::Lifeline {
	assert warning (self.covered->size() = 1) with log ('ExecutionSpecification "{1}" covers more than 1 Lifeline'._format(self));
	return self.covered->asList()->first(); 
}

helper UML::OccurrenceSpecification::lifeline() : UML::Lifeline {
	assert fatal (self.covered->size() = 1) with log ('Malformed input model: "OccurrenceSpecification.covered->size()" is not equals to "1" for element "{1}"'._format(self));
	return self.covered->asList()->first(); 
}

/*
property clientIdsRegistry : Dict (Classifier, String);
helper UML::Classifier::clientId() : String {
	-- We assume that this registry will be really really small
	var id : String := clientIdsRegistry->get(self);
	if (id = null) {
		id := 'C' + (clientIdsRegistry->size() + 1).toString();
		clientIdsRegistry->put(self, id);
	};
	return id; 
}
*/

helper UML::Classifier::clientVarName() : String {
	return self.name.toLowerCase(); 
}

helper UML::Property::defaultValueAsString() : String {
	if (self.defaultValue <> null) {
		return self.defaultValue.toString();
	} else if (self.type.name = 'String') {
		return '';
	} else if (self.type.name = 'Boolean') {
		return 'false';
	} else if (self.type.name = 'Integer') {
		return '0';
	} else if (self.type.name = 'Real') {
		return '0.0';
	} else {
		assert fatal (false) with log ('Unknown Property type: "{1}"'._format(self.type.name));
	};
	return null;
}