modeltype UML "strict" uses uml('http://www.eclipse.org/uml2/5.0.0/UML');
modeltype CPN "strict" uses cpntools('http://io.github.abelgomez/cpntools/1.0');

transformation ps2cpntools(in uml : UML, out cpn : CPN);

main() {
	map cpnet();
}

mapping cpnet() : CPN::Cpnet {
	globbox := map globbox();
}

mapping globbox() : CPN::Globbox {
	declarations += map priorities();
	declarations += map simpleColorSetDeclarations();
	declarations += map compoundColorSetDeclarations();
}

	
mapping priorities() : CPN::Block {
	idname := "Standard priorities";
	declarations += object CPN::Ml { expression := "val P1 = 10;"};
	declarations += object CPN::Ml { expression := "val P2 = 20;"};
	declarations += object CPN::Ml { expression := "val P3 = 30;"};
	declarations += object CPN::Ml { expression := "val P4 = 40;"};
	declarations += object CPN::Ml { expression := "val P5 = 50;"};
	declarations += object CPN::Ml { expression := "val P6 = 60;"};
}

mapping simpleColorSetDeclarations() : CPN::Block {
	idname := "Standard simple declarations";
	declarations += map unitDeclaration();
	declarations += map boolDeclaration();
	declarations += map intDeclaration();
	declarations += map intinfDeclaration();
	declarations += map timeDeclaration();
	declarations += map realDeclaration();
	declarations += map stringDeclaration();
}

mapping unitDeclaration() : CPN::Unit { 
	idname := "UNIT";
};

mapping boolDeclaration() : CPN::Boolean {
	idname := "BOOL"
};

mapping intDeclaration() : CPN::Integer {
	idname := "INT"
};

mapping intinfDeclaration() : CPN::LargeInteger {
	idname := "INTINF"
};

mapping timeDeclaration() : CPN::Time {
	idname := "TIME"
};

mapping realDeclaration() : CPN::Real {
	idname := "REAL"
};

mapping stringDeclaration() : CPN::String {
	idname := "STRING"
};

mapping compoundColorSetDeclarations() : CPN::Block {
	idname := "Standard compound declarations";
	declarations += object CPN::Alias { 
		idname := "INTT" ; 
		timed := true; 
		simpleColors := resolveoneIn(intDeclaration);
	};
	declarations += object CPN::Product {
		idname := "REC";
		timed := true; 
		simpleColors += resolveoneIn(intDeclaration);
		simpleColors += resolveoneIn(stringDeclaration);
		simpleColors += resolveoneIn(intDeclaration);
		simpleColors += resolveoneIn(intDeclaration);
	};
	declarations += object CPN::Product {
		idname := "CLI";
		timed := true; 
		simpleColors += resolveoneIn(stringDeclaration);
		simpleColors += resolveoneIn(stringDeclaration);
		simpleColors += resolveoneIn(intDeclaration);
		simpleColors += resolveoneIn(intDeclaration);
		simpleColors += resolveoneIn(intDeclaration);
	};
	declarations += object CPN::Product {
		idname := "CL";
		timed := true; 
		simpleColors += resolveoneIn(intDeclaration);
		simpleColors += resolveoneIn(stringDeclaration);
		simpleColors += resolveoneIn(stringDeclaration);
		simpleColors += resolveoneIn(intDeclaration);
		simpleColors += resolveoneIn(intDeclaration);
	};
	declarations += object CPN::Product {
		idname := "ECLI";
		timed := true; 
		simpleColors += resolveoneIn(intDeclaration);
		simpleColors += resolveoneIn(stringDeclaration);
		simpleColors += resolveoneIn(stringDeclaration);
		simpleColors += resolveoneIn(intDeclaration);
		simpleColors += resolveoneIn(intDeclaration);
		simpleColors += resolveoneIn(intDeclaration);
	};
	declarations += object CPN::Product {
		idname := "ECLIR";
		timed := true; 
		simpleColors += resolveoneIn(intDeclaration);
		simpleColors += resolveoneIn(stringDeclaration);
		simpleColors += resolveoneIn(stringDeclaration);
		simpleColors += resolveoneIn(intDeclaration);
		simpleColors += resolveoneIn(intDeclaration);
		simpleColors += resolveoneIn(intDeclaration);
	};
	declarations += object CPN::Product {
		idname := "INT2";
		timed := true; 
		simpleColors += resolveoneIn(intDeclaration);
		simpleColors += resolveoneIn(intDeclaration);
	};
};
